name: IOS build and deploy
on:
  push:
    branches:
      - IOSBuildRelease
jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Import certificates (iOS)
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_DISTRIBUTION_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_DISTRIBUTION_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12                
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

            security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychains -d user -s $KEYCHAIN_PATH

            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.2
          channel: stable
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS application archive
        run: flutter build ipa --export-options-plist=ios/exportOptions.plist --no-codesign

      - name: Decode App Store Connect private key file and save it
        env:
          API_KEY_BASE64: ${{ secrets.IOS_APPSTORE_CONNECT_PRIVATE_KEY_BASE64 }}
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
        run: |
          mkdir -p $HOME/private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o $HOME/private_keys/AuthKey_${API_KEY}.p8
          echo "Saved key at: $HOME/private_keys/AuthKey_${API_KEY}.p8"
          ls $HOME/private_keys

      - name: Verify API key file exists
        env:
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
        run: |
          API_KEY_PATH="$HOME/private_keys/AuthKey_${API_KEY}.p8"
          
          echo "Checking for API key at: $API_KEY_PATH"
          
          if [ -f "$API_KEY_PATH" ]; then
            echo "✅ API key file exists."
          else
            echo "❌ API key file does NOT exist!"
            exit 1
          fi
      - name: Debug absolute path resolution
        env:
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
        run: |
          API_KEY_PATH="$HOME/private_keys/AuthKey_${API_KEY}.p8"
          
          # Print the resolved absolute path
          echo "Resolved absolute path: $(realpath $API_KEY_PATH)"
          
          # List files in the directory
          ls -la $(dirname $API_KEY_PATH)


      - name: Sign and Export IPA with Automatic Signing
        env:
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
          ISSUER_ID: ${{ secrets.IOS_APPSTORE_CONNECT_ISSUER_ID }}
        run: |
          ls ~/Library/MobileDevice/Provisioning\ Profiles
          
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$(realpath $HOME/private_keys/AuthKey_${API_KEY}.p8)" \
            -authenticationKeyID $API_KEY \
            -authenticationKeyIssuerID $ISSUER_ID \
            -archivePath build/ios/archive/Runner.xcarchive
            DEVELOPMENT_TEAM=YAN363KYTD \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGN_STYLE=Automatic \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            archive
          
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/exportOptions.plist \
            -exportPath build/ \
            -allowProvisioningUpdates

      - name: Decode App Store Connect private key file and save it
        env:
          API_KEY_BASE64: ${{ secrets.IOS_APPSTORE_CONNECT_PRIVATE_KEY_BASE64 }}
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode -o ~/private_keys/AuthKey_$API_KEY.p8

          ls ~/private_keys

      - name: Upload to App Store Connect
        env:
          ISSUER_ID: ${{ secrets.IOS_APPSTORE_CONNECT_ISSUER_ID }}
          API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
        run: |
          echo "Before uploading: "
          xcrun altool --upload-app -f build/ios/ipa/automate.ipa -t ios --apiKey $API_KEY --apiIssuer "$ISSUER_ID"

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\
          Profiles/build_pp.mobileprovision
